extends layout

block content
	div(align='center', class='jumbotron')
		if verifypass
			h2 Enter your password in order to see results
			form#form1(action='/result', method='post')
				input(type='hidden', name='yourresultid', value=verifypass)
				input(type='password', name='yourpassword', placeholder='Enter you password here')
				button.btn.btn-medium.btn-info(type='submit', form='form1', value='OK') OK
				| 
				a.btn.btn-medium.btn-warning(href="/profile")= "Back"
		if results
			each r in results
				div.col-md-3(align='left')
					h4 
						| Survey name:  
						strong #{r.surveyname}
				div.col-md-3(align='left')
					h4
						| Owner: 
						strong #{r.surveyowner}
				div.col-md-3(align='left')
					h4
						| End of survey: 
						strong #{r.surveyend}
				div.col-md-3(align='left')
					h4
						if count=="NAN"
							| Answered: 
							strong #{countt}
						else
							| Percentage answered: 
							strong #{count}
				div(align='center', class='jumbotron')
					div.col-md-12(align='center')								
						h2 Results of the respondents:
					div.col-md-6(align='left')
						h2 Questions
					div.col-md-6(align='center')
						h2 Answers

					each r in results
						each q in r.questions
							div(align='center', class='row')
								div.col-md-6(align='left')
									h3 #{q.questionnumber+1}. #{q.question}
								div.col-md-6(align='left')
									if q.answertype=="range"
										h3 average: #{srednia[q.questionnumber]}	
										-var i =(q.availbeanswers[1]-q.availbeanswers[0]+1)/q.availbeanswers[2]
										-var j=q.availbeanswers[0]
										-var k=q.availbeanswers[2]
									else
										h3 #{odp[q.questionnumber]}	
										-var i=q.answercount
										-var j=0
										-var k=0
										
									if ile[q.questionnumber].length>1
										h3 Select chart to draw
										button(onclick='draw(#{q.questionnumber},"pie","'+ile[q.questionnumber]+'","'+co[q.questionnumber]+'",#{i},#{j},#{k})', type='button') Pie Charts	
										button(onclick='draw(#{q.questionnumber},"column","'+ile[q.questionnumber]+'","'+co[q.questionnumber]+'",#{i},#{j},#{k})',type='botton') Column Charts
										button(onclick='draw(#{q.questionnumber},"histo","'+ile[q.questionnumber]+'","'+co[q.questionnumber]+'",#{i},#{j},#{k})', type='button') Histogram
										div(id=q.questionnumber)
											div(id=(q.questionnumber+'list'))
										div(id=q.questionnumber+'chart')
							hr(style='color:#000000')									
		if result
			.alert.alert-danger(role='alert')= result							
		br
		br
		a.btn.btn-medium.btn-info(href="/profile")= "Back"
		br
		br
		script(type='text/javascript', src='https://www.google.com/jsapi').
		script(type='text/javascript').
			var number = null;
			var wart = null;
			function drawCharts(aa,bb){
				number = aa;
				wart = bb;
				var list = '<select onchange="draw(this.value)" required pattern="[a-z]+"> \
				<option value="no">Select a graph</option> \
				<option value="pie">Pie Chart</option> \
				<option value="column">Column Chart</option> \
				<option value="histo">Histogram</option> \
				</select>';
				var what = document.createElement("div");
				what.innerHTML = list+ wart[1];
				var div = document.getElementById(aa+'list');
				var x =document.getElementById(aa);
				x.insertBefore(what,div); 
			}
			google.load('visualization', '1.0', {'packages':['corechart']});
			google.setOnLoadCallback(drawChart);
			function draw(number,xx,ile,co,l,k,r){		
				var data = new google.visualization.DataTable();
				var tabile =[];
				var tabco =[];
				j=0;
				if(r==0){
					for(i=0;i<l;i++){
						tabco[i]="";

						while(j<co.length){
							if (co[j]==",") 
								{j++;
								break;}
							else 
								{tabco[i]+=co[j];
								j++;}
						}
					}
				}else{
					n=0;
					for(i=0;i<l;i++){
						tabco[i]=k+(r*n);
						n++;
						
					}
				}

				j=0;

				for(i=0;i<l;i++){
					tabile[i]="";
					while(j<ile.length){
						if (ile[j]==",") 
							{j++;
							break;}
						else 
							{tabile[i]+=ile[j];
							j++;}
					}
				}

				var liczba=parseInt(ile[0]);
				data.addColumn('string', 'Topping');
				data.addColumn('number', 'Slices');
				for(i=0;i<tabco.length;i++){
				data.addRows([
				[tabco[i].toString(), parseInt(tabile[i])],
				]);
				}
				var options = {'title':'Chart of result',
				'width':400,
				'height':300};
				if(xx=="pie") {
				var chart = new google.visualization.PieChart(document.getElementById(number+'chart'));
				chart.draw(data, options);
				}
				else if(xx=="column") {
				var chart = new google.visualization.ColumnChart(document.getElementById(number+'chart'));
				chart.draw(data, options);
				}
				else if(xx=="histo") {
				var chart = new google.visualization.Histogram(document.getElementById(number+'chart'));
				chart.draw(data, options);
				}
			}
